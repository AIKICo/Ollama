// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Ollama
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Text.Json.SourceGeneration", "8.0.10.11423")]
    internal sealed partial class SourceGenerationContext
    {
        private readonly static global::System.Text.Json.JsonSerializerOptions s_defaultOptions = new()
        {
            Converters =
            {
                new global::OpenApiGenerator.JsonConverters.CreateModelResponseStatusJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.CreateModelResponseStatusNullableJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.PullModelResponseStatusJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.PullModelResponseStatusNullableJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.PushModelResponseStatusJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.PushModelResponseStatusNullableJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.GenerateChatCompletionResponseDoneReasonJsonConverter(),
                new global::OpenApiGenerator.JsonConverters.GenerateChatCompletionResponseDoneReasonNullableJsonConverter(),
            },
            DefaultIgnoreCondition = global::System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull,
        };

        /// <summary>
        /// The default <see cref="global::System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="global::System.Text.Json.JsonSerializerOptions"/> instance.
        /// </summary>
        public static global::Ollama.SourceGenerationContext Default { get; } = new global::Ollama.SourceGenerationContext(new global::System.Text.Json.JsonSerializerOptions(s_defaultOptions));
        
        /// <summary>
        /// The source-generated options associated with this context.
        /// </summary>
        protected override global::System.Text.Json.JsonSerializerOptions? GeneratedSerializerOptions { get; } = s_defaultOptions;
        
        /// <inheritdoc/>
        public SourceGenerationContext() : base(null)
        {
        }
        
        /// <inheritdoc/>
        public SourceGenerationContext(global::System.Text.Json.JsonSerializerOptions options) : base(options)
        {
        }

        private static bool TryGetTypeInfoForRuntimeCustomConverter<TJsonMetadataType>(global::System.Text.Json.JsonSerializerOptions options, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<TJsonMetadataType> jsonTypeInfo)
        {
            global::System.Text.Json.Serialization.JsonConverter? converter = GetRuntimeConverterForType(typeof(TJsonMetadataType), options);
            if (converter != null)
            {
                jsonTypeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo<TJsonMetadataType>(options, converter);
                return true;
            }
        
            jsonTypeInfo = null;
            return false;
        }
        
        private static global::System.Text.Json.Serialization.JsonConverter? GetRuntimeConverterForType(global::System.Type type, global::System.Text.Json.JsonSerializerOptions options)
        {
            for (int i = 0; i < options.Converters.Count; i++)
            {
                global::System.Text.Json.Serialization.JsonConverter? converter = options.Converters[i];
                if (converter?.CanConvert(type) == true)
                {
                    return ExpandConverter(type, converter, options, validateCanConvert: false);
                }
            }
        
            return null;
        }
        
        private static global::System.Text.Json.Serialization.JsonConverter ExpandConverter(global::System.Type type, global::System.Text.Json.Serialization.JsonConverter converter, global::System.Text.Json.JsonSerializerOptions options, bool validateCanConvert = true)
        {
            if (validateCanConvert && !converter.CanConvert(type))
            {
                throw new global::System.InvalidOperationException(string.Format("The converter '{0}' is not compatible with the type '{1}'.", converter.GetType(), type));
            }
        
            if (converter is global::System.Text.Json.Serialization.JsonConverterFactory factory)
            {
                converter = factory.CreateConverter(type, options);
                if (converter is null || converter is global::System.Text.Json.Serialization.JsonConverterFactory)
                {
                    throw new global::System.InvalidOperationException(string.Format("The converter '{0}' cannot return null or a JsonConverterFactory instance.", factory.GetType()));
                }
            }
        
            return converter;
        }
        
        private static global::System.Text.Json.Serialization.JsonConverter<TJsonMetadataType?> GetConverterForNullableProperty<TJsonMetadataType>(global::System.Text.Json.Serialization.JsonConverter converter, global::System.Text.Json.JsonSerializerOptions options)
            where TJsonMetadataType : struct
        {
            if (converter.CanConvert(typeof(TJsonMetadataType?)))
            {
                return (global::System.Text.Json.Serialization.JsonConverter<TJsonMetadataType?>)ExpandConverter(typeof(TJsonMetadataType?), converter, options, validateCanConvert: false);
            }
        
            converter = ExpandConverter(typeof(TJsonMetadataType), converter, options);
            global::System.Text.Json.Serialization.Metadata.JsonTypeInfo<TJsonMetadataType> typeInfo = global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.CreateValueInfo<TJsonMetadataType>(options, converter);
            return global::System.Text.Json.Serialization.Metadata.JsonMetadataServices.GetNullableConverter<TJsonMetadataType>(typeInfo);
        }
    }
}
